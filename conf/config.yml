# General
serverName: UUID # Each server within a cluster needs a unique name. Set to UUID to have deepstream autogenerate a unique id
showLogo: true # Show the deepstream logo on startup (highly recommended)
logLevel: INFO # Log messages with this level and above. Valid levels are DEBUG, INFO, WARN, ERROR, OFF
#libDir: ../lib  # Directory where all plugins reside

# Connectivity
# currently at most one may be specified
connectionEndpoints:
  websocket:
    name: uws
    options:
        # port for the websocket server
        port: ${PORT}


# SSL Configuration
sslKey: null
sslCert: null
sslCa: null

# Logger Configuration
# logger:
#   # use either the default logger
#   name: default
#    options:
#      colors: true
#      logLevel: INFO # value of logLevel (line 4) will always overwrite this value

#   # or the winston logger
#   name: winston
#   options:
#     # specify a list of transports (console, file, time)
#     -
#       type: console
#       options:
#         level: info # value of logLevel (line 4) will always overwrite this value
#         colorize: true
#     -
#       type: time
#       options:
#         filename: ../var/deepstream

#   # or a custom logger
#   path: ./my-custom-logger

# Plugin Configuration
# Storage options
storageExclusion: null # a RegExp that matches recordNames. If it matches, the record's data won't be stored in the db

# Security
maxAuthAttempts: 3 # invalid login attempts before the connection is cut
logInvalidAuthData: true # if true, the logs will contain the cleartext username / password of invalid login attempts
maxMessageSize: 1048576 # maximum allowed size of an individual message in bytes

#Authentication
auth:
  type: file
  options:
    path: ./users.yml
    hash: false

# # reading users and passwords from a file
#   type: file
#   options:
#     path: ./users.yml # Path to the user file. Can be json, js or yml
#     hash: 'md5' # the name of a HMAC digest algorithm
#     iterations: 100 # the number of times the algorithm should be applied
#     keyLength: 32 # the length of the resulting key

# # getting permissions from a http webhook
#   type: http
#   options:
#     endpointUrl: https://someurl.com/validateLogin # a post request will be send to this url on every incoming connection
#     permittedStatusCodes: [ 200 ] # any of these will be treated as access granted
#     requestTimeout: 2000 # if the webhook didn't respond after this amount of milliseconds, the connection will be rejected

# Permissioning
permission:
  # Only config or custom permissionHandler at the moment
  type: config
  options:
    # Path to the permissionFile. Can be json, js or yml
    path: ./permissions.yml
    # Amount of times nested cross-references will be loaded. Avoids endless loops
    maxRuleIterations: 3
    # PermissionResults are cached to increase performance. Lower number means more loading
    cacheEvacuationInterval: 60000

# Timeouts (in milliseconds)
rpcProviderQueryTimeout: 1000
rpcProviderCacheTime: 60000
rpcAckTimeout: 1000
rpcTimeout: 10000
cacheRetrievalTimeout: 1000
storageRetrievalTimeout: 2000
dependencyInitialisationTimeout: 2000
